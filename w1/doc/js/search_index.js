var search_data = {"index":{"searchIndex":["array","book","dictionary","fixnum","friend","hash","myhashset","object","string","temperature","bubble_sort()","bubble_sort!()","caesar()","concatenate()","difference()","doubler()","factors()","median()","my_each()","my_inject()","my_map()","my_select()","my_transpose()","my_uniq()","square()","square!()","stringify()","substrings()","subwords()","sum()","two_sum()","readme","pass-by-reference","gemfile","gemfile.lock","array","method","object","rspec","string","gemfile","gemfile.lock","block","enumerable","iteration","gemfile","gemfile.lock","class-i","hash","gemfile","gemfile.lock","class-ii","scope","coding-style","debugger","dry","method-decomposition","naming","refactoring"],"longSearchIndex":["array","book","dictionary","fixnum","friend","hash","myhashset","object","string","temperature","array#bubble_sort()","array#bubble_sort!()","string#caesar()","object#concatenate()","hash#difference()","object#doubler()","object#factors()","array#median()","array#my_each()","array#my_inject()","array#my_map()","array#my_select()","array#my_transpose()","array#my_uniq()","array#square()","array#square!()","fixnum#stringify()","object#substrings()","object#subwords()","array#sum()","array#two_sum()","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Array","","Array.html","","<p>### My Enumerable Methods\n<p>Implement new `Array` methods `my_map` and `my_select`. Do it by\nmonkey-patching …\n"],["Book","","Book.html","",""],["Dictionary","","Dictionary.html","",""],["Fixnum","","Fixnum.html","","<p>Stringify\n<p>In this exercise, you will define a method `Fixnum#stringify(base)`, which\nwill return a string …\n"],["Friend","","Friend.html","",""],["Hash","","Hash.html","","<p>Hash: Difference\n<p>Write a method, `Hash#difference(other_hash)`. Your method should return a\nnew hash containing …\n"],["MyHashSet","","MyHashSet.html","","<p>MyHashSet\n<p>Ruby provides a class named `Set`. A set is an unordered collection of\nvalues with no duplicates. …\n"],["Object","","Object.html","",""],["String","","String.html","","<p>String: Caesar cipher\n<p>Implement a Caesar cipher: en.wikipedia.org/wiki/Caesar_cipher\n\n<p>Example:\n"],["Temperature","","Temperature.html","",""],["bubble_sort","Array","Array.html#method-i-bubble_sort","(&prc)",""],["bubble_sort!","Array","Array.html#method-i-bubble_sort-21","()",""],["caesar","String","String.html#method-i-caesar","(shift)",""],["concatenate","Object","Object.html#method-i-concatenate","(strings)","<p>### Concatenate Create a method that takes in an `Array` of `String`s and\nuses `inject` to return the …\n"],["difference","Hash","Hash.html#method-i-difference","(other_hash)",""],["doubler","Object","Object.html#method-i-doubler","(array)","<p>### Doubler Write a `doubler` method that takes an array of integers and\nreturns an array with the original …\n"],["factors","Object","Object.html#method-i-factors","(num)","<p>### Factors\n<p>Write a method `factors(num)` that returns an array containing all the\nfactors of a given …\n"],["median","Array","Array.html#method-i-median","()",""],["my_each","Array","Array.html#method-i-my_each","(&prc)",""],["my_inject","Array","Array.html#method-i-my_inject","(&blk)",""],["my_map","Array","Array.html#method-i-my_map","(&prc)",""],["my_select","Array","Array.html#method-i-my_select","(&prc)",""],["my_transpose","Array","Array.html#method-i-my_transpose","()",""],["my_uniq","Array","Array.html#method-i-my_uniq","()",""],["square","Array","Array.html#method-i-square","()",""],["square!","Array","Array.html#method-i-square-21","()",""],["stringify","Fixnum","Fixnum.html#method-i-stringify","(base)",""],["substrings","Object","Object.html#method-i-substrings","(string)","<p>### Substrings and Subwords\n<p>Write a method, `substrings`, that will take a `String` and return an array\n…\n"],["subwords","Object","Object.html#method-i-subwords","(word, dictionary)",""],["sum","Array","Array.html#method-i-sum","()",""],["two_sum","Array","Array.html#method-i-two_sum","()",""],["README","","README_md.html","","<p>Week 1: Basic Object-Oriented Programming\n<p>Monday: Arrays, Strings, and Objects\n<p>Readings\n"],["pass-by-reference","","pass-by-reference_md.html","","<p>Pass by reference\n<p>The Ruby language is what is called a <strong>pass by\nreference</strong>\nlanguage. This means that variables ...\n"],["Gemfile","","w1d1/exercises/Gemfile.html","","<p>source “rubygems.org”\n<p>gem “byebug” gem “rspec”, “~&gt; 3.2.0” …\n"],["Gemfile.lock","","w1d1/exercises/Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  byebug (5.0.0)\n    columnize (= 0.9.0)\n  columnize (0.9.0) ...</pre>\n"],["array","","w1d1/readings/array_md.html","","<p>Arrays\n<p>Goals\n<p>Familiarize yourself with the selected, important methods here.\n"],["method","","w1d1/readings/method_md.html","","<p>Methods\n<p>Goals\n<p>Know what a method is.\n"],["object","","w1d1/readings/object_md.html","","<p>Object\n<p>Goals\n<p>Know what an object is.\n"],["rspec","","w1d1/readings/rspec_md.html","","<p>How to Run RSpec Tests\n<p>When you download each day&#39;s exercises, you&#39;ll find that they\ncome\npackaged ...\n"],["string","","w1d1/readings/string_md.html","","<p>Strings\n<p>Goals\n<p>Familiarize yourself with the selected, important methods here.\n"],["Gemfile","","w1d2/exercises/Gemfile.html","","<p>source “rubygems.org”\n<p>gem “byebug” gem “rspec”, “~&gt; 3.2.0” …\n"],["Gemfile.lock","","w1d2/exercises/Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  byebug (5.0.0)\n    columnize (= 0.9.0)\n  columnize (0.9.0) ...</pre>\n"],["block","","w1d2/readings/block_md.html","","<p>Blocks and Procs\n<p>Goals\n<p>Know how to define a block, especially one that takes arguments.\n"],["enumerable","","w1d2/readings/enumerable_md.html","","<p>Enumerable\n<p>Goals\n<p>Know that any <code>Enumerable</code> method can be called on an\n<code>Array</code> or\n <code>Hash</code>.\n"],["iteration","","w1d2/readings/iteration_md.html","","<p>Iteration\n<p>Goals\n<p>Know what an index variable is.\n"],["Gemfile","","w1d3/exercises/Gemfile.html","","<p>source “rubygems.org”\n<p>gem “byebug” gem “rspec”, “~&gt; 3.2.0” …\n"],["Gemfile.lock","","w1d3/exercises/Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  byebug (5.0.0)\n    columnize (= 0.9.0)\n  columnize (0.9.0) ...</pre>\n"],["class-i","","w1d3/readings/class-i_md.html","","<p>Classes\n<p>Goals\n<p>Know that a class is a blueprint for an object.\n"],["hash","","w1d3/readings/hash_md.html","","<p>Hash\n<p>Goals\n<p>Familiarize yourself with the selected, important methods here.\n"],["Gemfile","","w1d4/exercises/Gemfile.html","","<p>source “rubygems.org”\n<p>gem “byebug” gem “rspec”, “~&gt; 3.2.0” …\n"],["Gemfile.lock","","w1d4/exercises/Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  byebug (5.0.0)\n    columnize (= 0.9.0)\n  columnize (0.9.0) ...</pre>\n"],["class-ii","","w1d4/readings/class-ii_md.html","","<p>Objects and Classes\n<p>Goals\n<p>Know when to stop using a <code>Hash</code> and when to switch to a class.\n"],["scope","","w1d4/readings/scope_md.html","","<p>Scope\n<p>Scope is the context in which a variable name is valid\nand can be used.\n<p>A name is <strong>in scope</strong> (accessible) …\n"],["coding-style","","w1d5/readings/coding-style_md.html","","<p>Coding style\n<p>Goals\n<p>Always follow these most important rules:\n"],["debugger","","w1d5/readings/debugger_md.html","","<p>Debugging\n<p>Any program of sufficient complexity is unlikely to work the first\ntime.\nYou will make mistakes. ...\n"],["dry","","w1d5/readings/dry_md.html","","<p>DRY (Don&#39;t Repeat Yourself)\n<p>In <em>The Pragmatic Programmer</em>, Hunt and Thomas define the\nDRY\nprinciple ...\n\n<blockquote>"],["method-decomposition","","w1d5/readings/method-decomposition_md.html","","<p>Method Decomposition &amp; Design\n<p>Methods should be atomic\n<p><strong>Each method should do one thing.</strong> A method should …\n"],["naming","","w1d5/readings/naming_md.html","","<p>Choosing good names\n<p><strong>In a nutshell: use descriptive, consistent naming.</strong>\n<p>The better your naming, the easier …\n"],["refactoring","","w1d5/readings/refactoring_md.html","","<p>Refactoring (code smells)\n<p>From the Wiki:\n\n<blockquote><p>A code smell is any symptom in the source code of a program that …\n"]]}}